{"ast":null,"code":"import createStore from '@myrtille/mutate';\nimport listeners from './listeners';\nimport tilesData from './utils/tiles';\nexport const initState = () => ({\n  gameOver: undefined,\n  // 'loose' | 'win'\n  players: [],\n  enemies: [],\n  deckTiles: {\n    length: 10\n  },\n  // should be an array in a futur iteration\n  deckCards: [],\n  dices: [],\n  activeCard: {},\n  // should be an array in a futur iteration\n  grid: [{ ...tilesData[0],\n    x: 0,\n    y: 0,\n    status: [\n      /* gaz, water, landslide, etc */\n    ]\n  }],\n  playerActions: {\n    tile: undefined,\n    current: {},\n    // action the player is currently doing\n    possibilities: [] // known possible actions for the current player\n\n  },\n  technical: {\n    actions: []\n  }\n});\n\nconst saveAction = (store, action) => {\n  const {\n    actions\n  } = store.getState().technical || {};\n  if (!actions) return;\n  store.mutate(state => {\n    state.technical.actions.push(action);\n  });\n};\n\nexport default ((state = initState()) => {\n  // creating store\n  let store = createStore(state); // adding all game listeners\n\n  listeners.forEach(args => store.addListener(...args)); // adding an action listener to save them all\n\n  store.addListener(saveAction); // adding utility\n\n  store.reset = () => store.setState(state);\n\n  return store;\n});","map":{"version":3,"sources":["/home/fabienjuif/work/subterra/packages/engine/src/core.js"],"names":["createStore","listeners","tilesData","initState","gameOver","undefined","players","enemies","deckTiles","length","deckCards","dices","activeCard","grid","x","y","status","playerActions","tile","current","possibilities","technical","actions","saveAction","store","action","getState","mutate","state","push","forEach","args","addListener","reset","setState"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,kBAAxB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,SAAP,MAAsB,eAAtB;AAEA,OAAO,MAAMC,SAAS,GAAG,OAAO;AAC9BC,EAAAA,QAAQ,EAAEC,SADoB;AACT;AACrBC,EAAAA,OAAO,EAAE,EAFqB;AAG9BC,EAAAA,OAAO,EAAE,EAHqB;AAI9BC,EAAAA,SAAS,EAAE;AAAEC,IAAAA,MAAM,EAAE;AAAV,GAJmB;AAIH;AAC3BC,EAAAA,SAAS,EAAE,EALmB;AAM9BC,EAAAA,KAAK,EAAE,EANuB;AAO9BC,EAAAA,UAAU,EAAE,EAPkB;AAOd;AAChBC,EAAAA,IAAI,EAAE,CACJ,EACE,GAAGX,SAAS,CAAC,CAAD,CADd;AAEEY,IAAAA,CAAC,EAAE,CAFL;AAGEC,IAAAA,CAAC,EAAE,CAHL;AAIEC,IAAAA,MAAM,EAAE;AACN;AADM;AAJV,GADI,CARwB;AAkB9BC,EAAAA,aAAa,EAAE;AACbC,IAAAA,IAAI,EAAEb,SADO;AAEbc,IAAAA,OAAO,EAAE,EAFI;AAEA;AACbC,IAAAA,aAAa,EAAE,EAHF,CAGM;;AAHN,GAlBe;AAuB9BC,EAAAA,SAAS,EAAE;AACTC,IAAAA,OAAO,EAAE;AADA;AAvBmB,CAAP,CAAlB;;AA4BP,MAAMC,UAAU,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACpC,QAAM;AAAEH,IAAAA;AAAF,MAAcE,KAAK,CAACE,QAAN,GAAiBL,SAAjB,IAA8B,EAAlD;AAEA,MAAI,CAACC,OAAL,EAAc;AAEdE,EAAAA,KAAK,CAACG,MAAN,CAAcC,KAAD,IAAW;AACtBA,IAAAA,KAAK,CAACP,SAAN,CAAgBC,OAAhB,CAAwBO,IAAxB,CAA6BJ,MAA7B;AACD,GAFD;AAGD,CARD;;AAUA,gBAAe,CAACG,KAAK,GAAGzB,SAAS,EAAlB,KAAyB;AACtC;AACA,MAAIqB,KAAK,GAAGxB,WAAW,CAAC4B,KAAD,CAAvB,CAFsC,CAItC;;AACA3B,EAAAA,SAAS,CAAC6B,OAAV,CAAmBC,IAAD,IAAUP,KAAK,CAACQ,WAAN,CAAkB,GAAGD,IAArB,CAA5B,EALsC,CAOtC;;AACAP,EAAAA,KAAK,CAACQ,WAAN,CAAkBT,UAAlB,EARsC,CAUtC;;AACAC,EAAAA,KAAK,CAACS,KAAN,GAAc,MAAMT,KAAK,CAACU,QAAN,CAAeN,KAAf,CAApB;;AAEA,SAAOJ,KAAP;AACD,CAdD","sourcesContent":["import createStore from '@myrtille/mutate'\nimport listeners from './listeners'\nimport tilesData from './utils/tiles'\n\nexport const initState = () => ({\n  gameOver: undefined, // 'loose' | 'win'\n  players: [],\n  enemies: [],\n  deckTiles: { length: 10 }, // should be an array in a futur iteration\n  deckCards: [],\n  dices: [],\n  activeCard: {}, // should be an array in a futur iteration\n  grid: [\n    {\n      ...tilesData[0],\n      x: 0,\n      y: 0,\n      status: [\n        /* gaz, water, landslide, etc */\n      ],\n    },\n  ],\n  playerActions: {\n    tile: undefined,\n    current: {}, // action the player is currently doing\n    possibilities: [], // known possible actions for the current player\n  },\n  technical: {\n    actions: [],\n  },\n})\n\nconst saveAction = (store, action) => {\n  const { actions } = store.getState().technical || {}\n\n  if (!actions) return\n\n  store.mutate((state) => {\n    state.technical.actions.push(action)\n  })\n}\n\nexport default (state = initState()) => {\n  // creating store\n  let store = createStore(state)\n\n  // adding all game listeners\n  listeners.forEach((args) => store.addListener(...args))\n\n  // adding an action listener to save them all\n  store.addListener(saveAction)\n\n  // adding utility\n  store.reset = () => store.setState(state)\n\n  return store\n}\n"]},"metadata":{},"sourceType":"module"}