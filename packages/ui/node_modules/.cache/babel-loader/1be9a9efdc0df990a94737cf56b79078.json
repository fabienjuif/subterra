{"ast":null,"code":"var _jsxFileName = \"/home/fabienjuif/work/subterra/packages/ui/src/screens/game.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport cn from 'classnames';\nimport { motion } from 'framer-motion';\nimport { useStateAt, useDispatch } from '@myrtille/react';\nimport { tiles } from '@subterra/engine';\nimport { Grid, UIPlayer, CardsDeck, Logs, MovableGrid } from '../components';\nimport classes from './game.module.scss';\n\nconst Game = () => {\n  const state = useStateAt();\n  const dispatch = useDispatch();\n  const [cells, setCells] = useState([]);\n  const [players, setPlayers] = useState([]);\n  useEffect(() => {\n    // this is for debug purpose\n    dispatch('@cards>pick');\n    dispatch('@cards>pick');\n    dispatch('@cards>pick');\n    dispatch('@cards>pick');\n  }, [dispatch]);\n  useEffect(() => {\n    let cells = tiles.getWrappingCells(state.grid);\n    cells = cells.map(cell => ({ ...cell,\n      actions: state.playerActions.possibilities.filter(action => tiles.isCellEqual(action.payload)(cell))\n    }));\n    setCells(cells);\n  }, [state.grid, state.playerActions.possibilities]);\n  useEffect(() => {\n    if (state.players.length <= 0) return;\n    const firstPlayerIndex = state.players.findIndex(({\n      first\n    }) => first);\n    setPlayers([...state.players.slice(firstPlayerIndex), ...state.players.slice(0, firstPlayerIndex)]);\n  }, [state.players]);\n  if (state.players.length === 0) return null;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: cn('app', classes.app),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: cn('players', classes.players),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => dispatch('@players>pass'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }, \"pass\"), players.map(player => /*#__PURE__*/React.createElement(motion.div, {\n    key: player.type,\n    positionTransition: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(UIPlayer, Object.assign({}, player, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }\n  }))))), /*#__PURE__*/React.createElement(MovableGrid, {\n    className: cn('board', classes.board),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    onAction: dispatch,\n    cells: cells,\n    players: state.players,\n    nextTile: state.playerActions.tile,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: cn('turn', classes.turn),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }, \"turn: \", state.turn), /*#__PURE__*/React.createElement(\"div\", {\n    className: cn('tiles-deck', classes.tilesDeck),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }\n  }, \"tiles: \", state.deckTiles.length), /*#__PURE__*/React.createElement(CardsDeck, {\n    className: cn('cards-deck', classes.cardsDeck),\n    size: state.deckCards.length,\n    card: state.activeCard,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Logs, {\n    className: cn('logs', classes.logs),\n    actions: state.technical.actions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default Game;","map":{"version":3,"sources":["/home/fabienjuif/work/subterra/packages/ui/src/screens/game.jsx"],"names":["React","useState","useEffect","cn","motion","useStateAt","useDispatch","tiles","Grid","UIPlayer","CardsDeck","Logs","MovableGrid","classes","Game","state","dispatch","cells","setCells","players","setPlayers","getWrappingCells","grid","map","cell","actions","playerActions","possibilities","filter","action","isCellEqual","payload","length","firstPlayerIndex","findIndex","first","slice","app","player","type","board","tile","turn","tilesDeck","deckTiles","cardsDeck","deckCards","activeCard","logs","technical"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport cn from 'classnames'\nimport { motion } from 'framer-motion'\nimport { useStateAt, useDispatch } from '@myrtille/react'\nimport { tiles } from '@subterra/engine'\nimport { Grid, UIPlayer, CardsDeck, Logs, MovableGrid } from '../components'\nimport classes from './game.module.scss'\n\nconst Game = () => {\n  const state = useStateAt()\n  const dispatch = useDispatch()\n  const [cells, setCells] = useState([])\n  const [players, setPlayers] = useState([])\n\n  useEffect(() => {\n    // this is for debug purpose\n    dispatch('@cards>pick')\n    dispatch('@cards>pick')\n    dispatch('@cards>pick')\n    dispatch('@cards>pick')\n  }, [dispatch])\n\n  useEffect(() => {\n    let cells = tiles.getWrappingCells(state.grid)\n\n    cells = cells.map((cell) => ({\n      ...cell,\n      actions: state.playerActions.possibilities.filter((action) =>\n        tiles.isCellEqual(action.payload)(cell),\n      ),\n    }))\n\n    setCells(cells)\n  }, [state.grid, state.playerActions.possibilities])\n\n  useEffect(() => {\n    if (state.players.length <= 0) return\n\n    const firstPlayerIndex = state.players.findIndex(({ first }) => first)\n\n    setPlayers([\n      ...state.players.slice(firstPlayerIndex),\n      ...state.players.slice(0, firstPlayerIndex),\n    ])\n  }, [state.players])\n\n  if (state.players.length === 0) return null\n\n  return (\n    <div className={cn('app', classes.app)}>\n      <div className={cn('players', classes.players)}>\n        <button onClick={() => dispatch('@players>pass')}>pass</button>\n        {players.map((player) => (\n          <motion.div key={player.type} positionTransition>\n            <UIPlayer {...player} />\n          </motion.div>\n        ))}\n      </div>\n      <MovableGrid className={cn('board', classes.board)}>\n        <Grid\n          onAction={dispatch}\n          cells={cells}\n          players={state.players}\n          nextTile={state.playerActions.tile}\n        />\n      </MovableGrid>\n      <div className={cn('turn', classes.turn)}>turn: {state.turn}</div>\n      <div className={cn('tiles-deck', classes.tilesDeck)}>\n        tiles: {state.deckTiles.length}\n      </div>\n      <CardsDeck\n        className={cn('cards-deck', classes.cardsDeck)}\n        size={state.deckCards.length}\n        card={state.activeCard}\n      />\n      <Logs\n        className={cn('logs', classes.logs)}\n        actions={state.technical.actions}\n      />\n    </div>\n  )\n}\n\nexport default Game\n"]},"metadata":{},"sourceType":"module"}