{"ast":null,"code":"export const players = {\n  damage: (player, damage, from) => ({\n    type: '@players>damage',\n    payload: {\n      damage,\n      from,\n      playerName: player.name\n    }\n  }),\n  move: (player, tile) => ({\n    type: '@players>move',\n    payload: {\n      playerName: player.name,\n      x: tile.x,\n      y: tile.y,\n      cost: 1 // TODO: Get this from the tile and block any action with a cost > pa\n\n    }\n  }),\n  heal: (player, skill) => ({\n    type: '@players>heal',\n    payload: {\n      playerName: player.name,\n      cost: skill ? skill.cost : 2,\n      amount: 1\n    }\n  })\n};\nexport const roll = {\n  failThen: (min, player, actionOnFail) => ({\n    type: '@dices>roll',\n    payload: {\n      min,\n      playerName: player.name,\n      actionOnFail\n    }\n  }),\n  then: nextAction => ({\n    type: '@dices>roll',\n    payload: {\n      nextAction\n    }\n  })\n};\nexport const isActionEquals = obj1 => obj2 => {\n  return JSON.stringify(obj1) === JSON.stringify(obj2);\n};","map":{"version":3,"sources":["/home/fabienjuif/work/subterra/packages/engine/src/actions.js"],"names":["players","damage","player","from","type","payload","playerName","name","move","tile","x","y","cost","heal","skill","amount","roll","failThen","min","actionOnFail","then","nextAction","isActionEquals","obj1","obj2","JSON","stringify"],"mappings":"AAAA,OAAO,MAAMA,OAAO,GAAG;AACrBC,EAAAA,MAAM,EAAE,CAACC,MAAD,EAASD,MAAT,EAAiBE,IAAjB,MAA2B;AACjCC,IAAAA,IAAI,EAAE,iBAD2B;AAEjCC,IAAAA,OAAO,EAAE;AACPJ,MAAAA,MADO;AAEPE,MAAAA,IAFO;AAGPG,MAAAA,UAAU,EAAEJ,MAAM,CAACK;AAHZ;AAFwB,GAA3B,CADa;AASrBC,EAAAA,IAAI,EAAE,CAACN,MAAD,EAASO,IAAT,MAAmB;AACvBL,IAAAA,IAAI,EAAE,eADiB;AAEvBC,IAAAA,OAAO,EAAE;AACPC,MAAAA,UAAU,EAAEJ,MAAM,CAACK,IADZ;AAEPG,MAAAA,CAAC,EAAED,IAAI,CAACC,CAFD;AAGPC,MAAAA,CAAC,EAAEF,IAAI,CAACE,CAHD;AAIPC,MAAAA,IAAI,EAAE,CAJC,CAIE;;AAJF;AAFc,GAAnB,CATe;AAkBrBC,EAAAA,IAAI,EAAE,CAACX,MAAD,EAASY,KAAT,MAAoB;AACxBV,IAAAA,IAAI,EAAE,eADkB;AAExBC,IAAAA,OAAO,EAAE;AACPC,MAAAA,UAAU,EAAEJ,MAAM,CAACK,IADZ;AAEPK,MAAAA,IAAI,EAAEE,KAAK,GAAGA,KAAK,CAACF,IAAT,GAAgB,CAFpB;AAGPG,MAAAA,MAAM,EAAE;AAHD;AAFe,GAApB;AAlBe,CAAhB;AA4BP,OAAO,MAAMC,IAAI,GAAG;AAClBC,EAAAA,QAAQ,EAAE,CAACC,GAAD,EAAMhB,MAAN,EAAciB,YAAd,MAAgC;AACxCf,IAAAA,IAAI,EAAE,aADkC;AAExCC,IAAAA,OAAO,EAAE;AACPa,MAAAA,GADO;AAEPZ,MAAAA,UAAU,EAAEJ,MAAM,CAACK,IAFZ;AAGPY,MAAAA;AAHO;AAF+B,GAAhC,CADQ;AASlBC,EAAAA,IAAI,EAAGC,UAAD,KAAiB;AACrBjB,IAAAA,IAAI,EAAE,aADe;AAErBC,IAAAA,OAAO,EAAE;AACPgB,MAAAA;AADO;AAFY,GAAjB;AATY,CAAb;AAiBP,OAAO,MAAMC,cAAc,GAAIC,IAAD,IAAWC,IAAD,IAAU;AAChD,SAAOC,IAAI,CAACC,SAAL,CAAeH,IAAf,MAAyBE,IAAI,CAACC,SAAL,CAAeF,IAAf,CAAhC;AACD,CAFM","sourcesContent":["export const players = {\n  damage: (player, damage, from) => ({\n    type: '@players>damage',\n    payload: {\n      damage,\n      from,\n      playerName: player.name,\n    },\n  }),\n  move: (player, tile) => ({\n    type: '@players>move',\n    payload: {\n      playerName: player.name,\n      x: tile.x,\n      y: tile.y,\n      cost: 1, // TODO: Get this from the tile and block any action with a cost > pa\n    },\n  }),\n  heal: (player, skill) => ({\n    type: '@players>heal',\n    payload: {\n      playerName: player.name,\n      cost: skill ? skill.cost : 2,\n      amount: 1,\n    },\n  }),\n}\n\nexport const roll = {\n  failThen: (min, player, actionOnFail) => ({\n    type: '@dices>roll',\n    payload: {\n      min,\n      playerName: player.name,\n      actionOnFail,\n    },\n  }),\n  then: (nextAction) => ({\n    type: '@dices>roll',\n    payload: {\n      nextAction,\n    },\n  }),\n}\n\nexport const isActionEquals = (obj1) => (obj2) => {\n  return JSON.stringify(obj1) === JSON.stringify(obj2)\n}\n"]},"metadata":{},"sourceType":"module"}