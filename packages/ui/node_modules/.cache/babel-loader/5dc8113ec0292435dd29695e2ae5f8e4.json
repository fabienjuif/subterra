{"ast":null,"code":"import { isCellEqual } from './utils/tiles';\nexport const checkLoose = (store, action) => {\n  const prevState = store.getState();\n\n  if (!prevState.players.some(({\n    health\n  }) => health > 0)) {\n    store.mutate(state => {\n      state.gameOver = 'loose';\n    });\n  }\n};\nexport const checkWin = (store, action) => {\n  const prevState = store.getState();\n  const outCell = prevState.grid.find(({\n    type\n  }) => type === 'end');\n  if (!outCell) return;\n  const playersOut = prevState.players.filter(isCellEqual(outCell));\n  const deadPlayers = prevState.players.filter(({\n    health\n  }) => health <= 0);\n\n  if (deadPlayers.length + playersOut.length !== prevState.players.length) {\n    return;\n  }\n\n  store.mutate(state => {\n    state.gameOver = deadPlayers.length < prevState.players.length / 3 ? 'win' : 'loose';\n  });\n};","map":{"version":3,"sources":["/home/fabienjuif/work/subterra/packages/engine/src/game.js"],"names":["isCellEqual","checkLoose","store","action","prevState","getState","players","some","health","mutate","state","gameOver","checkWin","outCell","grid","find","type","playersOut","filter","deadPlayers","length"],"mappings":"AAAA,SAASA,WAAT,QAA4B,eAA5B;AAEA,OAAO,MAAMC,UAAU,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC3C,QAAMC,SAAS,GAAGF,KAAK,CAACG,QAAN,EAAlB;;AAEA,MAAI,CAACD,SAAS,CAACE,OAAV,CAAkBC,IAAlB,CAAuB,CAAC;AAAEC,IAAAA;AAAF,GAAD,KAAgBA,MAAM,GAAG,CAAhD,CAAL,EAAyD;AACvDN,IAAAA,KAAK,CAACO,MAAN,CAAcC,KAAD,IAAW;AACtBA,MAAAA,KAAK,CAACC,QAAN,GAAiB,OAAjB;AACD,KAFD;AAGD;AACF,CARM;AAUP,OAAO,MAAMC,QAAQ,GAAG,CAACV,KAAD,EAAQC,MAAR,KAAmB;AACzC,QAAMC,SAAS,GAAGF,KAAK,CAACG,QAAN,EAAlB;AAEA,QAAMQ,OAAO,GAAGT,SAAS,CAACU,IAAV,CAAeC,IAAf,CAAoB,CAAC;AAAEC,IAAAA;AAAF,GAAD,KAAcA,IAAI,KAAK,KAA3C,CAAhB;AACA,MAAI,CAACH,OAAL,EAAc;AAEd,QAAMI,UAAU,GAAGb,SAAS,CAACE,OAAV,CAAkBY,MAAlB,CAAyBlB,WAAW,CAACa,OAAD,CAApC,CAAnB;AACA,QAAMM,WAAW,GAAGf,SAAS,CAACE,OAAV,CAAkBY,MAAlB,CAAyB,CAAC;AAAEV,IAAAA;AAAF,GAAD,KAAgBA,MAAM,IAAI,CAAnD,CAApB;;AAEA,MAAIW,WAAW,CAACC,MAAZ,GAAqBH,UAAU,CAACG,MAAhC,KAA2ChB,SAAS,CAACE,OAAV,CAAkBc,MAAjE,EAAyE;AACvE;AACD;;AAEDlB,EAAAA,KAAK,CAACO,MAAN,CAAcC,KAAD,IAAW;AACtBA,IAAAA,KAAK,CAACC,QAAN,GACEQ,WAAW,CAACC,MAAZ,GAAqBhB,SAAS,CAACE,OAAV,CAAkBc,MAAlB,GAA2B,CAAhD,GAAoD,KAApD,GAA4D,OAD9D;AAED,GAHD;AAID,CAjBM","sourcesContent":["import { isCellEqual } from './utils/tiles'\n\nexport const checkLoose = (store, action) => {\n  const prevState = store.getState()\n\n  if (!prevState.players.some(({ health }) => health > 0)) {\n    store.mutate((state) => {\n      state.gameOver = 'loose'\n    })\n  }\n}\n\nexport const checkWin = (store, action) => {\n  const prevState = store.getState()\n\n  const outCell = prevState.grid.find(({ type }) => type === 'end')\n  if (!outCell) return\n\n  const playersOut = prevState.players.filter(isCellEqual(outCell))\n  const deadPlayers = prevState.players.filter(({ health }) => health <= 0)\n\n  if (deadPlayers.length + playersOut.length !== prevState.players.length) {\n    return\n  }\n\n  store.mutate((state) => {\n    state.gameOver =\n      deadPlayers.length < prevState.players.length / 3 ? 'win' : 'loose'\n  })\n}\n"]},"metadata":{},"sourceType":"module"}