{"ast":null,"code":"import { players } from '../actions';\n\nconst rotate90 = where => {\n  switch (where) {\n    case 'left':\n      return 'bottom';\n\n    case 'bottom':\n      return 'right';\n\n    case 'right':\n      return 'top';\n\n    case 'top':\n      return 'left';\n\n    default:\n      return where;\n  }\n};\n\nexport const isOpen = where => tile => {\n  let rotations = (tile.rotation || 0) / 90;\n  let rotatedWhere = where;\n\n  for (let i = 0; i < rotations; i += 1) {\n    rotatedWhere = rotate90(rotatedWhere);\n  }\n\n  return tile[rotatedWhere];\n}; // TODO: rename it (tile => cell) since it only use x/y\n\nexport const isCellsTouched = (tile1, tile2) => {\n  if (tile1.x !== tile2.x && tile1.y !== tile2.y) return false;\n  if (tile1.x === tile2.x && tile1.y === tile2.y) return false;\n  if (Math.abs(tile1.x - tile2.x) > 1) return false;\n  if (Math.abs(tile1.y - tile2.y) > 1) return false;\n  return true;\n};\nexport const getCellsBounds = cells => {\n  let minX = +Infinity;\n  let minY = +Infinity;\n  let maxX = -Infinity;\n  let maxY = -Infinity;\n  cells.forEach(({\n    x,\n    y\n  }) => {\n    minX = Math.min(minX, x);\n    minY = Math.min(minY, y);\n    maxX = Math.max(maxX, x);\n    maxY = Math.max(maxY, y);\n  });\n  return {\n    left: minX,\n    top: minY,\n    right: maxX,\n    bottom: maxY\n  };\n};\nexport const isCellTile = cell => !!cell.tile;\nexport const isCellEqual = cell1 => cell2 => cell1.x === cell2.x && cell1.y === cell2.y;\nexport const getWrappingCells = tiles => {\n  const {\n    left,\n    top,\n    right,\n    bottom\n  } = getCellsBounds(tiles);\n  const emptyCells = [];\n\n  for (let y = top - 1; y < bottom + 2; y += 1) {\n    for (let x = left - 1; x < right + 2; x += 1) {\n      if (!tiles.some(tile => tile.x === x && tile.y === y)) {\n        emptyCells.push({\n          x,\n          y,\n          empty: true\n        });\n      }\n    }\n  }\n\n  return [...emptyCells, ...tiles.map(tile => ({\n    x: tile.x,\n    y: tile.y,\n    empty: false,\n    tile\n  }))];\n};\nexport const canMoveFromTo = (from, to) => {\n  if (from.y !== to.y && from.x !== to.x) return false;\n  if (from.y === to.y && from.x === to.x) return false;\n\n  if (from.y === to.y) {\n    // left & right\n    if (from.x < to.x) {\n      if (!isOpen('right')(from) || !isOpen('left')(to)) {\n        return false;\n      }\n    } else if (!isOpen('left')(from) || !isOpen('right')(to)) {\n      return false;\n    }\n  } else {\n    // top & bottom\n    if (from.y < to.y) {\n      if (!isOpen('bottom')(from) || !isOpen('top')(to)) {\n        return false;\n      }\n    } else if (!isOpen('top')(from) || !isOpen('bottom')(to)) {\n      return false;\n    }\n  }\n\n  return true;\n};\nexport const getSimpleDistanceFromTo = from => to => {\n  return Math.abs(from.y - to.y) + Math.abs(from.x - to.x);\n};\nexport const getDistanceFromTo = from => to => {\n  // TODO: use A*\n  //      care of tile cost\n  return getSimpleDistanceFromTo(from)(to);\n};\nexport const findActionsOnCell = (player, playerTile) => cell => {\n  if (getDistanceFromTo(playerTile)(cell) > 1) return [];\n  const actions = [];\n\n  if (isCellTile(cell)) {\n    if (canMoveFromTo(playerTile, cell.tile)) {\n      actions.push(players.move(player, cell.tile));\n    }\n  } // else {\n  //   // create a fake tile that is opened everywhere\n  //   // so we can test we can go to this fake tile\n  //   const fakeOpenTile = {\n  //     ...cell,\n  //     top: true,\n  //     left: true,\n  //     bottom: true,\n  //     right: true,\n  //   }\n  //   if (\n  //     isCellsTouched(playerCell, cell) &&\n  //     canMoveFromTo(playerCell.tile, fakeOpenTile)\n  //   ) {\n  //     actions.push({ cell, code: 'look', cost: 1 })\n  //     actions.push({ cell, code: 'explore', cost: 1 })\n  //   }\n  // }\n\n\n  return actions;\n};\nconst tiles = [{\n  id: 0,\n  type: 'start',\n  top: true,\n  left: true,\n  bottom: true,\n  right: true\n}, {\n  id: 1,\n  type: 'end',\n  bottom: true\n}, {\n  id: 2,\n  type: 'gaz',\n  top: true,\n  right: true\n}, {\n  id: 3,\n  type: 'water',\n  top: true,\n  bottom: true\n}, {\n  id: 4,\n  top: true,\n  bottom: true\n}, {\n  id: 5,\n  type: 'water',\n  top: true,\n  left: true,\n  bottom: true,\n  right: true\n}, {\n  id: 6,\n  type: 'landslide',\n  dices: [3, 6],\n  top: true,\n  right: true\n}, {\n  id: 7,\n  type: 'landslide',\n  dices: [3, 2],\n  top: true,\n  right: true,\n  left: true\n}, {\n  id: 8,\n  type: 'landslide',\n  dices: [6, 2],\n  top: true,\n  right: true\n}, {\n  id: 9,\n  top: true,\n  left: true,\n  bottom: true,\n  right: true\n}, {\n  id: 10,\n  type: 'water',\n  left: true,\n  top: true,\n  right: true\n}, {\n  id: 11,\n  top: true,\n  bottom: true\n}, {\n  id: 12,\n  type: 'enemy',\n  top: true\n}, {\n  id: 13,\n  type: 'tight',\n  top: true,\n  bottom: true\n}, {\n  id: 14,\n  top: true\n}, {\n  id: 15,\n  top: true,\n  right: true\n}, {\n  id: 16,\n  type: 'fall',\n  top: true,\n  bottom: true\n}, {\n  id: 17,\n  type: 'water',\n  top: true,\n  left: true,\n  bottom: true,\n  right: true\n}, {\n  id: 18,\n  type: 'landslide',\n  dices: [6, 1],\n  top: true,\n  right: true,\n  left: true\n}, {\n  id: 19,\n  top: true,\n  right: true\n}, {\n  id: 20,\n  type: 'block',\n  top: true,\n  bottom: true\n}, {\n  id: 21,\n  type: 'enemy',\n  top: true\n}, {\n  id: 22,\n  top: true,\n  left: true,\n  bottom: true,\n  right: true\n}, {\n  id: 23,\n  top: true,\n  right: true\n}, {\n  id: 24,\n  top: true,\n  right: true,\n  left: true\n}, {\n  id: 25,\n  top: true,\n  left: true,\n  bottom: true,\n  right: true\n}, {\n  id: 26,\n  type: 'damage',\n  top: true,\n  left: true,\n  bottom: true,\n  right: true\n}, {\n  id: 27,\n  type: 'gaz',\n  top: true,\n  right: true\n}, {\n  id: 28,\n  type: 'enemy',\n  top: true\n}, {\n  id: 29,\n  type: 'gaz',\n  top: true,\n  right: true,\n  left: true\n}, {\n  id: 30,\n  type: 'damage',\n  top: true,\n  left: true,\n  bottom: true,\n  right: true\n}, {\n  id: 31,\n  type: 'water',\n  top: true,\n  bottom: true\n}, {\n  id: 32,\n  type: 'block',\n  top: true,\n  bottom: true\n}, {\n  id: 33,\n  type: 'water',\n  top: true,\n  bottom: true\n}, {\n  id: 34,\n  type: 'gaz',\n  top: true,\n  right: true\n}, {\n  id: 35,\n  top: true,\n  right: true,\n  left: true\n}, {\n  id: 36,\n  type: 'block',\n  top: true,\n  bottom: true\n}, {\n  id: 37,\n  type: 'tight',\n  top: true,\n  bottom: true\n}, {\n  id: 38,\n  type: 'fall',\n  top: true,\n  bottom: true\n}, {\n  id: 39,\n  type: 'enemy',\n  top: true\n}, {\n  id: 40,\n  type: 'gaz',\n  top: true,\n  right: true\n}, {\n  id: 41,\n  type: 'fall',\n  top: true,\n  bottom: true\n}, {\n  id: 42,\n  type: 'landslide',\n  dices: [3, 5],\n  top: true,\n  right: true,\n  left: true\n}, {\n  id: 43,\n  type: 'landslide',\n  dices: [4, 5],\n  top: true,\n  right: true,\n  left: true\n}, {\n  id: 44,\n  type: 'water',\n  top: true,\n  right: true,\n  left: true\n}, {\n  id: 45,\n  type: 'landslide',\n  dices: [3, 1],\n  top: true,\n  right: true,\n  left: true\n}, {\n  id: 46,\n  type: 'gaz',\n  top: true,\n  right: true,\n  left: true\n}, {\n  id: 47,\n  type: 'gaz',\n  top: true,\n  right: true\n}, {\n  id: 48,\n  top: true,\n  right: true\n}, {\n  id: 49,\n  type: 'water',\n  top: true,\n  bottom: true\n}, {\n  id: 50,\n  type: 'landslide',\n  top: true,\n  right: true\n}, {\n  id: 51,\n  type: 'enemy',\n  top: true\n}, {\n  id: 52,\n  top: true\n}, {\n  id: 53,\n  type: 'tight',\n  top: true,\n  bottom: true\n}, {\n  id: 54,\n  type: 'landslide',\n  dices: [4, 6],\n  top: true,\n  right: true,\n  left: true\n}, {\n  id: 55,\n  type: 'landslide',\n  top: true,\n  left: true,\n  right: true\n}, {\n  id: 56,\n  type: 'enemy',\n  top: true\n}, {\n  id: 57,\n  top: true,\n  bottom: true\n}, {\n  id: 58,\n  type: 'landslide',\n  dices: [1, 5],\n  top: true,\n  right: true\n}, {\n  id: 59,\n  type: 'enemy',\n  top: true,\n  right: true\n}, {\n  id: 60,\n  top: true,\n  bottom: true\n}, {\n  id: 61,\n  type: 'gaz',\n  top: true,\n  right: true\n}, {\n  id: 62,\n  type: 'enemy',\n  top: true,\n  right: true\n}, {\n  id: 63,\n  type: 'landslide',\n  dices: [2, 5],\n  top: true,\n  right: true,\n  left: true\n}, {\n  id: 64,\n  top: true,\n  right: true,\n  left: true\n}];\nexport default tiles;","map":{"version":3,"sources":["/home/fabienjuif/work/subterra/packages/engine/src/utils/tiles.js"],"names":["players","rotate90","where","isOpen","tile","rotations","rotation","rotatedWhere","i","isCellsTouched","tile1","tile2","x","y","Math","abs","getCellsBounds","cells","minX","Infinity","minY","maxX","maxY","forEach","min","max","left","top","right","bottom","isCellTile","cell","isCellEqual","cell1","cell2","getWrappingCells","tiles","emptyCells","some","push","empty","map","canMoveFromTo","from","to","getSimpleDistanceFromTo","getDistanceFromTo","findActionsOnCell","player","playerTile","actions","move","id","type","dices"],"mappings":"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","sourcesContent":["import { players } from '../actions'\n\nconst rotate90 = (where) => {\n  switch (where) {\n    case 'left':\n      return 'bottom'\n    case 'bottom':\n      return 'right'\n    case 'right':\n      return 'top'\n    case 'top':\n      return 'left'\n    default:\n      return where\n  }\n}\n\nexport const isOpen = (where) => (tile) => {\n  let rotations = (tile.rotation || 0) / 90\n  let rotatedWhere = where\n  for (let i = 0; i < rotations; i += 1) {\n    rotatedWhere = rotate90(rotatedWhere)\n  }\n  return tile[rotatedWhere]\n}\n\n// TODO: rename it (tile => cell) since it only use x/y\nexport const isCellsTouched = (tile1, tile2) => {\n  if (tile1.x !== tile2.x && tile1.y !== tile2.y) return false\n  if (tile1.x === tile2.x && tile1.y === tile2.y) return false\n  if (Math.abs(tile1.x - tile2.x) > 1) return false\n  if (Math.abs(tile1.y - tile2.y) > 1) return false\n  return true\n}\n\nexport const getCellsBounds = (cells) => {\n  let minX = +Infinity\n  let minY = +Infinity\n  let maxX = -Infinity\n  let maxY = -Infinity\n\n  cells.forEach(({ x, y }) => {\n    minX = Math.min(minX, x)\n    minY = Math.min(minY, y)\n    maxX = Math.max(maxX, x)\n    maxY = Math.max(maxY, y)\n  })\n\n  return { left: minX, top: minY, right: maxX, bottom: maxY }\n}\n\nexport const isCellTile = (cell) => !!cell.tile\n\nexport const isCellEqual = (cell1) => (cell2) =>\n  cell1.x === cell2.x && cell1.y === cell2.y\n\nexport const getWrappingCells = (tiles) => {\n  const { left, top, right, bottom } = getCellsBounds(tiles)\n\n  const emptyCells = []\n\n  for (let y = top - 1; y < bottom + 2; y += 1) {\n    for (let x = left - 1; x < right + 2; x += 1) {\n      if (!tiles.some((tile) => tile.x === x && tile.y === y)) {\n        emptyCells.push({ x, y, empty: true })\n      }\n    }\n  }\n\n  return [\n    ...emptyCells,\n    ...tiles.map((tile) => ({ x: tile.x, y: tile.y, empty: false, tile })),\n  ]\n}\n\nexport const canMoveFromTo = (from, to) => {\n  if (from.y !== to.y && from.x !== to.x) return false\n  if (from.y === to.y && from.x === to.x) return false\n\n  if (from.y === to.y) {\n    // left & right\n    if (from.x < to.x) {\n      if (!isOpen('right')(from) || !isOpen('left')(to)) {\n        return false\n      }\n    } else if (!isOpen('left')(from) || !isOpen('right')(to)) {\n      return false\n    }\n  } else {\n    // top & bottom\n    if (from.y < to.y) {\n      if (!isOpen('bottom')(from) || !isOpen('top')(to)) {\n        return false\n      }\n    } else if (!isOpen('top')(from) || !isOpen('bottom')(to)) {\n      return false\n    }\n  }\n\n  return true\n}\n\nexport const getSimpleDistanceFromTo = (from) => (to) => {\n  return Math.abs(from.y - to.y) + Math.abs(from.x - to.x)\n}\n\nexport const getDistanceFromTo = (from) => (to) => {\n  // TODO: use A*\n  //      care of tile cost\n  return getSimpleDistanceFromTo(from)(to)\n}\n\nexport const findActionsOnCell = (player, playerTile) => (cell) => {\n  if (getDistanceFromTo(playerTile)(cell) > 1) return []\n\n  const actions = []\n\n  if (isCellTile(cell)) {\n    if (canMoveFromTo(playerTile, cell.tile)) {\n      actions.push(players.move(player, cell.tile))\n    }\n  }\n  // else {\n  //   // create a fake tile that is opened everywhere\n  //   // so we can test we can go to this fake tile\n  //   const fakeOpenTile = {\n  //     ...cell,\n  //     top: true,\n  //     left: true,\n  //     bottom: true,\n  //     right: true,\n  //   }\n  //   if (\n  //     isCellsTouched(playerCell, cell) &&\n  //     canMoveFromTo(playerCell.tile, fakeOpenTile)\n  //   ) {\n  //     actions.push({ cell, code: 'look', cost: 1 })\n  //     actions.push({ cell, code: 'explore', cost: 1 })\n  //   }\n  // }\n\n  return actions\n}\n\nconst tiles = [\n  {\n    id: 0,\n    type: 'start',\n    top: true,\n    left: true,\n    bottom: true,\n    right: true,\n  },\n  {\n    id: 1,\n    type: 'end',\n    bottom: true,\n  },\n  {\n    id: 2,\n    type: 'gaz',\n    top: true,\n    right: true,\n  },\n  {\n    id: 3,\n    type: 'water',\n    top: true,\n    bottom: true,\n  },\n  {\n    id: 4,\n    top: true,\n    bottom: true,\n  },\n  {\n    id: 5,\n    type: 'water',\n    top: true,\n    left: true,\n    bottom: true,\n    right: true,\n  },\n  {\n    id: 6,\n    type: 'landslide',\n    dices: [3, 6],\n    top: true,\n    right: true,\n  },\n  {\n    id: 7,\n    type: 'landslide',\n    dices: [3, 2],\n    top: true,\n    right: true,\n    left: true,\n  },\n  {\n    id: 8,\n    type: 'landslide',\n    dices: [6, 2],\n    top: true,\n    right: true,\n  },\n  {\n    id: 9,\n    top: true,\n    left: true,\n    bottom: true,\n    right: true,\n  },\n  {\n    id: 10,\n    type: 'water',\n    left: true,\n    top: true,\n    right: true,\n  },\n  {\n    id: 11,\n    top: true,\n    bottom: true,\n  },\n  {\n    id: 12,\n    type: 'enemy',\n    top: true,\n  },\n  {\n    id: 13,\n    type: 'tight',\n    top: true,\n    bottom: true,\n  },\n  {\n    id: 14,\n    top: true,\n  },\n  {\n    id: 15,\n    top: true,\n    right: true,\n  },\n  {\n    id: 16,\n    type: 'fall',\n    top: true,\n    bottom: true,\n  },\n  {\n    id: 17,\n    type: 'water',\n    top: true,\n    left: true,\n    bottom: true,\n    right: true,\n  },\n  {\n    id: 18,\n    type: 'landslide',\n    dices: [6, 1],\n    top: true,\n    right: true,\n    left: true,\n  },\n  {\n    id: 19,\n    top: true,\n    right: true,\n  },\n  {\n    id: 20,\n    type: 'block',\n    top: true,\n    bottom: true,\n  },\n  {\n    id: 21,\n    type: 'enemy',\n    top: true,\n  },\n  {\n    id: 22,\n    top: true,\n    left: true,\n    bottom: true,\n    right: true,\n  },\n  {\n    id: 23,\n    top: true,\n    right: true,\n  },\n  {\n    id: 24,\n    top: true,\n    right: true,\n    left: true,\n  },\n  {\n    id: 25,\n    top: true,\n    left: true,\n    bottom: true,\n    right: true,\n  },\n  {\n    id: 26,\n    type: 'damage',\n    top: true,\n    left: true,\n    bottom: true,\n    right: true,\n  },\n  {\n    id: 27,\n    type: 'gaz',\n    top: true,\n    right: true,\n  },\n  {\n    id: 28,\n    type: 'enemy',\n    top: true,\n  },\n  {\n    id: 29,\n    type: 'gaz',\n    top: true,\n    right: true,\n    left: true,\n  },\n  {\n    id: 30,\n    type: 'damage',\n    top: true,\n    left: true,\n    bottom: true,\n    right: true,\n  },\n  {\n    id: 31,\n    type: 'water',\n    top: true,\n    bottom: true,\n  },\n  {\n    id: 32,\n    type: 'block',\n    top: true,\n    bottom: true,\n  },\n  {\n    id: 33,\n    type: 'water',\n    top: true,\n    bottom: true,\n  },\n  {\n    id: 34,\n    type: 'gaz',\n    top: true,\n    right: true,\n  },\n  {\n    id: 35,\n    top: true,\n    right: true,\n    left: true,\n  },\n  {\n    id: 36,\n    type: 'block',\n    top: true,\n    bottom: true,\n  },\n  {\n    id: 37,\n    type: 'tight',\n    top: true,\n    bottom: true,\n  },\n  {\n    id: 38,\n    type: 'fall',\n    top: true,\n    bottom: true,\n  },\n  {\n    id: 39,\n    type: 'enemy',\n    top: true,\n  },\n  {\n    id: 40,\n    type: 'gaz',\n    top: true,\n    right: true,\n  },\n  {\n    id: 41,\n    type: 'fall',\n    top: true,\n    bottom: true,\n  },\n  {\n    id: 42,\n    type: 'landslide',\n    dices: [3, 5],\n    top: true,\n    right: true,\n    left: true,\n  },\n  {\n    id: 43,\n    type: 'landslide',\n    dices: [4, 5],\n    top: true,\n    right: true,\n    left: true,\n  },\n  {\n    id: 44,\n    type: 'water',\n    top: true,\n    right: true,\n    left: true,\n  },\n  {\n    id: 45,\n    type: 'landslide',\n    dices: [3, 1],\n    top: true,\n    right: true,\n    left: true,\n  },\n  {\n    id: 46,\n    type: 'gaz',\n    top: true,\n    right: true,\n    left: true,\n  },\n  {\n    id: 47,\n    type: 'gaz',\n    top: true,\n    right: true,\n  },\n  {\n    id: 48,\n    top: true,\n    right: true,\n  },\n  {\n    id: 49,\n    type: 'water',\n    top: true,\n    bottom: true,\n  },\n  {\n    id: 50,\n    type: 'landslide',\n    top: true,\n    right: true,\n  },\n  {\n    id: 51,\n    type: 'enemy',\n    top: true,\n  },\n  {\n    id: 52,\n    top: true,\n  },\n  {\n    id: 53,\n    type: 'tight',\n    top: true,\n    bottom: true,\n  },\n  {\n    id: 54,\n    type: 'landslide',\n    dices: [4, 6],\n    top: true,\n    right: true,\n    left: true,\n  },\n  {\n    id: 55,\n    type: 'landslide',\n    top: true,\n    left: true,\n    right: true,\n  },\n  {\n    id: 56,\n    type: 'enemy',\n    top: true,\n  },\n  {\n    id: 57,\n    top: true,\n    bottom: true,\n  },\n  {\n    id: 58,\n    type: 'landslide',\n    dices: [1, 5],\n    top: true,\n    right: true,\n  },\n  {\n    id: 59,\n    type: 'enemy',\n    top: true,\n    right: true,\n  },\n  {\n    id: 60,\n    top: true,\n    bottom: true,\n  },\n  {\n    id: 61,\n    type: 'gaz',\n    top: true,\n    right: true,\n  },\n  {\n    id: 62,\n    type: 'enemy',\n    top: true,\n    right: true,\n  },\n  {\n    id: 63,\n    type: 'landslide',\n    dices: [2, 5],\n    top: true,\n    right: true,\n    left: true,\n  },\n  {\n    id: 64,\n    top: true,\n    right: true,\n    left: true,\n  },\n]\n\nexport default tiles\n"]},"metadata":{},"sourceType":"module"}