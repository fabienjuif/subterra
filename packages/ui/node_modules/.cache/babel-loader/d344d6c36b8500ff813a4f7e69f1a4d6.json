{"ast":null,"code":"var _jsxFileName = \"/home/fabienjuif/work/subterra/packages/ui/src/components/grid.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport cn from 'classnames';\nimport { getCellsBounds, isCellEqual } from './utils/tiles';\nimport Cell from './cell';\nimport classes from './grid.module.scss';\n\nconst Grid = ({\n  cells,\n  onAction,\n  players,\n  nextTile\n}) => {\n  const [translateX, setTranslateX] = useState(0);\n  const [translateY, setTranslateY] = useState(0);\n  useEffect(() => {\n    const {\n      left,\n      top\n    } = getCellsBounds(cells);\n    setTranslateX(left * -1);\n    setTranslateY(top * -1);\n  }, [cells]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: cn('grid', classes.grid),\n    style: {\n      transform: `translate(${translateX * 4}em, ${translateY * 4}em)`\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 5\n    }\n  }, cells.map(cell => (!nextTile || !isCellEqual(cell)(nextTile)) && /*#__PURE__*/React.createElement(Cell, Object.assign({\n    key: `${cell.x}:${cell.y}`\n  }, cell, {\n    onAction: onAction,\n    players: players.filter(isCellEqual(cell)),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }\n  }))), nextTile && /*#__PURE__*/React.createElement(Cell, Object.assign({}, nextTile, {\n    tile: nextTile,\n    empty: false,\n    actions: [{\n      code: 'done'\n    }, {\n      code: 'rotate'\n    }],\n    onAction: onAction,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default Grid;","map":{"version":3,"sources":["/home/fabienjuif/work/subterra/packages/ui/src/components/grid.jsx"],"names":["React","useState","useEffect","cn","getCellsBounds","isCellEqual","Cell","classes","Grid","cells","onAction","players","nextTile","translateX","setTranslateX","translateY","setTranslateY","left","top","grid","transform","map","cell","x","y","filter","code"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,EAAP,MAAe,YAAf;AACA,SAASC,cAAT,EAAyBC,WAAzB,QAA4C,eAA5C;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,OAAP,MAAoB,oBAApB;;AAEA,MAAMC,IAAI,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA,QAAT;AAAmBC,EAAAA,OAAnB;AAA4BC,EAAAA;AAA5B,CAAD,KAA4C;AACvD,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8Bb,QAAQ,CAAC,CAAD,CAA5C;AACA,QAAM,CAACc,UAAD,EAAaC,aAAb,IAA8Bf,QAAQ,CAAC,CAAD,CAA5C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAM;AAAEe,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAgBd,cAAc,CAACK,KAAD,CAApC;AAEAK,IAAAA,aAAa,CAACG,IAAI,GAAG,CAAC,CAAT,CAAb;AACAD,IAAAA,aAAa,CAACE,GAAG,GAAG,CAAC,CAAR,CAAb;AACD,GALQ,EAKN,CAACT,KAAD,CALM,CAAT;AAOA,sBACE;AACE,IAAA,SAAS,EAAEN,EAAE,CAAC,MAAD,EAASI,OAAO,CAACY,IAAjB,CADf;AAEE,IAAA,KAAK,EAAE;AACLC,MAAAA,SAAS,EAAG,aAAYP,UAAU,GAAG,CAAE,OAAME,UAAU,GAAG,CAAE;AADvD,KAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMGN,KAAK,CAACY,GAAN,CACEC,IAAD,IACE,CAAC,CAACV,QAAD,IAAa,CAACP,WAAW,CAACiB,IAAD,CAAX,CAAkBV,QAAlB,CAAf,kBACE,oBAAC,IAAD;AACE,IAAA,GAAG,EAAG,GAAEU,IAAI,CAACC,CAAE,IAAGD,IAAI,CAACE,CAAE;AAD3B,KAEMF,IAFN;AAGE,IAAA,QAAQ,EAAEZ,QAHZ;AAIE,IAAA,OAAO,EAAEC,OAAO,CAACc,MAAR,CAAepB,WAAW,CAACiB,IAAD,CAA1B,CAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAHL,CANH,EAkBGV,QAAQ,iBACP,oBAAC,IAAD,oBACMA,QADN;AAEE,IAAA,IAAI,EAAEA,QAFR;AAGE,IAAA,KAAK,EAAE,KAHT;AAIE,IAAA,OAAO,EAAE,CAAC;AAAEc,MAAAA,IAAI,EAAE;AAAR,KAAD,EAAmB;AAAEA,MAAAA,IAAI,EAAE;AAAR,KAAnB,CAJX;AAKE,IAAA,QAAQ,EAAEhB,QALZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAnBJ,CADF;AA8BD,CAzCD;;AA2CA,eAAeF,IAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport cn from 'classnames'\nimport { getCellsBounds, isCellEqual } from './utils/tiles'\nimport Cell from './cell'\nimport classes from './grid.module.scss'\n\nconst Grid = ({ cells, onAction, players, nextTile }) => {\n  const [translateX, setTranslateX] = useState(0)\n  const [translateY, setTranslateY] = useState(0)\n\n  useEffect(() => {\n    const { left, top } = getCellsBounds(cells)\n\n    setTranslateX(left * -1)\n    setTranslateY(top * -1)\n  }, [cells])\n\n  return (\n    <div\n      className={cn('grid', classes.grid)}\n      style={{\n        transform: `translate(${translateX * 4}em, ${translateY * 4}em)`,\n      }}\n    >\n      {cells.map(\n        (cell) =>\n          (!nextTile || !isCellEqual(cell)(nextTile)) && (\n            <Cell\n              key={`${cell.x}:${cell.y}`}\n              {...cell}\n              onAction={onAction}\n              players={players.filter(isCellEqual(cell))}\n            />\n          ),\n      )}\n\n      {nextTile && (\n        <Cell\n          {...nextTile}\n          tile={nextTile}\n          empty={false}\n          actions={[{ code: 'done' }, { code: 'rotate' }]}\n          onAction={onAction}\n        />\n      )}\n    </div>\n  )\n}\n\nexport default Grid\n"]},"metadata":{},"sourceType":"module"}